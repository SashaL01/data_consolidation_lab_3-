import pandas as pd
import json
import random
from datetime import datetime
import os

def ensure_data_directory():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    data_dir = 'dags/data'
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
        print(f" –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {data_dir}")
    return data_dir

def generate_employees_data(data_dir):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö (CSV)"""
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö...")
    
    departments = ['IT', 'HR', 'Finance', 'Marketing', 'Sales', 'Operations', 'R&D']
    
    employees_data = {
        'employee_id': list(range(1, 101)),  # 100 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        'department': [random.choice(departments) for _ in range(100)]
    }
    
    df = pd.DataFrame(employees_data)
    file_path = os.path.join(data_dir, 'employees.csv')
    df.to_csv(file_path, index=False, encoding='utf-8')
    print(f" –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {file_path} —Å {len(df)} –∑–∞–ø–∏—Å—è–º–∏")
    
    return df

def generate_courses_data(data_dir):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö (JSON)"""
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö...")
    
    courses = [
        "Python Programming",
        "Data Analysis", 
        "Machine Learning",
        "Web Development",
        "Database Management",
        "Project Management",
        "Business Analytics",
        "Cloud Computing",
        "Cybersecurity",
        "DevOps Fundamentals"
    ]
    
    courses_data = [
        {'course_id': i + 1, 'course_name': course}
        for i, course in enumerate(courses)
    ]
    
    file_path = os.path.join(data_dir, 'courses.json')
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(courses_data, f, indent=2, ensure_ascii=False)
    
    print(f" –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {file_path} —Å {len(courses_data)} –∫—É—Ä—Å–∞–º–∏")
    return courses_data

def generate_training_data(employees_df, courses_data, data_dir):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—É—á–µ–Ω–∏–∏ (Excel)"""
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—É—á–µ–Ω–∏–∏...")
    
    training_records = []
    
    for employee_id in employees_df['employee_id']:
        # –ö–∞–∂–¥—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—Ç 1 –¥–æ 4 –∫—É—Ä—Å–æ–≤
        num_courses = random.randint(1, 4)
        taken_courses = random.sample(courses_data, num_courses)
        
        for course in taken_courses:
            score = random.randint(60, 100)  # –û—Ü–µ–Ω–∫–∞ –æ—Ç 60 –¥–æ 100
            training_records.append({
                'employee_id': employee_id,
                'course_id': course['course_id'],
                'score': score
            })
    
    training_df = pd.DataFrame(training_records)
    file_path = os.path.join(data_dir, 'training.xlsx')
    training_df.to_excel(file_path, index=False, engine='openpyxl')
    print(f" –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {file_path} —Å {len(training_df)} –∑–∞–ø–∏—Å—è–º–∏ –æ–± –æ–±—É—á–µ–Ω–∏–∏")
    
    return training_df

def generate_statistics(employees_df, courses_data, training_df, data_dir):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º"""
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•:")
    print("=" * 50)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    dept_stats = employees_df['department'].value_counts()
    print(f" –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employees_df)}")
    print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º:")
    for dept, count in dept_stats.items():
        print(f"  - {dept}: {count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º
    print(f"\n –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤: {len(courses_data)}")
    print("–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤:")
    for course in courses_data:
        print(f"  - {course['course_id']}: {course['course_name']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—É—á–µ–Ω–∏—é
    print(f"\n –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ–± –æ–±—É—á–µ–Ω–∏–∏: {len(training_df)}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {len(training_df) / len(employees_df):.1f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ü–µ–Ω–∫–∞–º
    avg_score = training_df['score'].mean()
    max_score = training_df['score'].max()
    min_score = training_df['score'].min()
    print(f" –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫:")
    print(f"  - –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_score:.1f}")
    print(f"  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {max_score}")
    print(f"  - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {min_score}")
    
    # –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤
    course_popularity = training_df['course_id'].value_counts().sort_index()
    print(f"\n –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∫—É—Ä—Å–æ–≤:")
    for course_id, count in course_popularity.items():
        course_name = next(c['course_name'] for c in courses_data if c['course_id'] == course_id)
        print(f"  - {course_name}: {count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
    stats_data = {
        'total_employees': len(employees_df),
        'total_courses': len(courses_data),
        'total_training_records': len(training_df),
        'average_courses_per_employee': len(training_df) / len(employees_df),
        'average_score': avg_score,
        'max_score': max_score,
        'min_score': min_score,
        'department_distribution': dept_stats.to_dict(),
        'course_popularity': course_popularity.to_dict()
    }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(" –ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        data_dir = ensure_data_directory()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        employees_df = generate_employees_data(data_dir)
        courses_data = generate_courses_data(data_dir)
        training_df = generate_training_data(employees_df, courses_data, data_dir)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        generate_statistics(employees_df, courses_data, training_df, data_dir)
        
        print("\n –í–°–ï –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–´!")
        print(f"\n –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ {data_dir}:")
        print("  - employees.csv (–¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö)")
        print("  - courses.json (–¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö)") 
        print("  - training.xlsx (–¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—É—á–µ–Ω–∏–∏)")
  
        
    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise

if __name__ == "__main__":
    main()