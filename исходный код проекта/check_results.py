#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π, —Ç–∞–∫ –∏ —Å –±–∞–∑–æ–π –≤–Ω—É—Ç—Ä–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
"""

import sqlite3
import pandas as pd
import os
import subprocess
import sys

DB_PATH = 'mobile_apps_retention.db'
CONTAINER_DB_PATH = '/opt/airflow/mobile_apps_retention.db'

def check_docker_container():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ scheduler"""
    try:
        result = subprocess.run(['sudo', 'docker', 'ps', '--format', '{{.Names}}'], 
                              capture_output=True, text=True, check=True)
        containers = result.stdout.strip().split('\n')
        scheduler_containers = [c for c in containers if 'scheduler' in c]
        return scheduler_containers[0] if scheduler_containers else None
    except (subprocess.CalledProcessError, FileNotFoundError):
        return None

def copy_db_from_container(container_name):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ —Ö–æ—Å—Ç"""
    try:
        print(f"–ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_name}...")
        subprocess.run([
            'sudo', 'docker', 'cp', 
            f'{container_name}:{CONTAINER_DB_PATH}', 
            DB_PATH
        ], check=True)
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(DB_PATH):
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ!")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_name = check_docker_container()
        if container_name:
            print(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä scheduler: {container_name}")
            if not copy_db_from_container(container_name):
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
                print("\nüîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
                print(f"sudo docker cp {container_name}:{CONTAINER_DB_PATH} {DB_PATH}")
                return
        else:
            print("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä scheduler –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DAG –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã.")
            return
    
    try:
        conn = sqlite3.connect(DB_PATH)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        
        print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for table in tables:
            print(f"  - {table[0]}")
        
        if ('retention_analysis',) not in tables:
            print("\n–¢–∞–±–ª–∏—Ü–∞ 'retention_analysis' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ß—Ç–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        query = """
        SELECT 
            category,
            total_installs,
            total_uninstalls,
            retained_users,
            retention_rate,
            churn_rate,
            analysis_date
        FROM retention_analysis 
        ORDER BY retention_rate DESC
        """
        
        df = pd.read_sql_query(query, conn)
        
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è:")
        print("=" * 80)
        print(df.to_string(index=False))
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_installs = df['total_installs'].sum()
        total_uninstalls = df['total_uninstalls'].sum()
        overall_retention = (total_installs - total_uninstalls) / total_installs * 100
        
        print(f"\n–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–æ–∫: {total_installs:,}")
        print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–∏–π: {total_uninstalls:,}")
        print(f"  –û–±—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è: {overall_retention:.2f}%")
        
        # –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        best_category = df.iloc[0]
        worst_category = df.iloc[-1]
        
        print(f"\n–õ—É—á—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É–¥–µ—Ä–∂–∞–Ω–∏—è:")
        print(f"  {best_category['category']}: {best_category['retention_rate']:.2f}%")
        
        print(f"\n–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:")
        print(f"  {worst_category['category']}: {worst_category['retention_rate']:.2f}%")
        
        conn.close()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

def copy_result_files():
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    container_name = check_docker_container()
    if not container_name:
        print("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä scheduler –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤!")
        return
    
    files_to_copy = [
        ('/opt/airflow/retention_analysis_report.txt', 'retention_analysis_report.txt'),
        ('/opt/airflow/retention_analysis_data.csv', 'retention_analysis_data.csv')
    ]
    
    print(f"\nüìÅ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_name}...")
    
    for container_path, local_path in files_to_copy:
        try:
            subprocess.run([
                'sudo', 'docker', 'cp', 
                f'{container_name}:{container_path}', 
                local_path
            ], check=True)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {local_path}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if os.path.exists(local_path):
                size = os.path.getsize(local_path)
                print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç")
                
        except subprocess.CalledProcessError:
            print(f"‚ö†Ô∏è  –§–∞–π–ª {container_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
    
    print("\nüìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    for _, local_path in files_to_copy:
        if os.path.exists(local_path):
            print(f"‚úÖ {local_path}")
        else:
            print(f"‚ùå {local_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")

def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞"""
    print("""
üîç –°–ö–†–ò–ü–¢ –ü–†–û–í–ï–†–ö–ò –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ù–ê–õ–ò–ó–ê –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–ê –£–î–ï–†–ñ–ê–ù–ò–Ø

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 check_results.py [–æ–ø—Ü–∏—è]

–û–ø—Ü–∏–∏:
    (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    --files          - –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    --help           - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
    python3 check_results.py           # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    python3 check_results.py --files   # –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    python3 check_results.py --help    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
    - retention_analysis_report.txt    # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    - retention_analysis_data.csv      # –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
    - mobile_apps_retention.db         # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
    –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä scheduler –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –Ω–µ–≥–æ.
    –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ sudo –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker.
    """)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == '--files':
            copy_result_files()
        elif sys.argv[1] == '--help':
            show_help()
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: {sys.argv[1]}")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    else:
        check_database()
